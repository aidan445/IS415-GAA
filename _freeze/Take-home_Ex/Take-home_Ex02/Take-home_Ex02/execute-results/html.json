{
  "hash": "1b8ea64fad3917f5bb7833b043e4f886",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan\"\nexecute:\n  freeze: true\n---\n\n\n## 1.0 Background\n\nThe last significant outbreak of dengue fever in Taiwan was recorded in 2015, with 43,000 dengue cases and 228 deaths. In 2023, 26,703 cases were recorded with 25K being from Tainan City.\n\n### 1.1 Objectives & Approach\n\nThe goal of this exercise is to determine if the distribution of dengue cases in Tainan are spatially and temporally dependent, and if so, to detect the locations of the clusters.\n\nWe will:\n\n-   visualise the data using mapping tools,\n\n-   conduct global & local spatial autocorrelation analysis,\n\n-   perform emerging hotspot analysis.\n\nThe areas selected are the Tainan City counties D01, D02, D04, D06, D07, D08, D32 & D39 during the epidemiology week 31-50 of 2023.\\\n\n------------------------------------------------------------------------\n\n## 2 Package Installation\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sfdep, sf, tidyverse, tmap, dplyr, plotly, lubridate, spdep, outbreaks)\n```\n:::\n\n\n### 2.1 Data Preparation\n\n+---------------------+-------------+-------------------------------------------------------------+\n| Data                | Type        | Description                                                 |\n+=====================+=============+=============================================================+\n| TAIWAN_VILLAGE_2020 | Geospatial\\ | Geospatial data of Taiwan village boundaries                |\n|                     | .shp        |                                                             |\n+---------------------+-------------+-------------------------------------------------------------+\n| Dengue_Daily.csv    | Aspatial\\   | Aspatial data of reported dengue cases in Taiwan since 1998 |\n|                     | .csv        |                                                             |\n+---------------------+-------------+-------------------------------------------------------------+\n\n#### 2.1.0 TAINAN_VILLAGE Data\n\nFirst-time load of the geospatial data and identifying its CRS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvillage_sf <- st_read(dsn = \"../../data/TaiwanVillage\",\n                      layer = \"TAINAN_VILLAGE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `TAINAN_VILLAGE' from data source \n  `C:\\aidan445\\IS415-GAA\\data\\TaiwanVillage' using driver `ESRI Shapefile'\nSimple feature collection with 649 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0269 ymin: 22.88751 xmax: 120.6563 ymax: 23.41374\nGeodetic CRS:  TWD97\n```\n:::\n\n```{.r .cell-code}\nst_crs(village_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: TWD97 \n  wkt:\nGEOGCRS[\"TWD97\",\n    DATUM[\"Taiwan Datum 1997\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"Taiwan, Republic of China - onshore and offshore - Taiwan Island, Penghu (Pescadores) Islands.\"],\n        BBOX[17.36,114.32,26.96,123.61]],\n    ID[\"EPSG\",3824]]\n```\n:::\n:::\n\n\nWe see that the geospatial data is using the TWD97 EPSG 3824 CRS.\n\nInspecting the data table, we see that the columns for COUNTYNAME, COUNTYID & COUNTYCODE all point to the same \"臺南市/Tainan City\" reference, so we can drop these values to reduce the clutter. (NOTE also removed as it has no impact on our analysis)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprunedvillage_sf <- village_sf %>%\n  select(-COUNTYNAME, -COUNTYID, -COUNTYCODE, -NOTE)\n```\n:::\n\n\nWe can now select only the counties of D01, D02, etc. previously specified.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprunedvillage_sf <- prunedvillage_sf %>%\n  filter(TOWNID %in% c(\"D01\", \"D02\", \"D04\", \"D06\", \"D07\", \"D08\", \"D32\", \"D39\"))\n```\n:::\n\n\nTo speed up future referencing of this dataframe, we can save it as an RDS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_rds(prunedvillage_sf, \"../../data/TaiwanVillage/prunedvillage_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprunedvillage_sf <-  read_rds(\"../../data/TaiwanVillage/prunedvillage_sf.rds\")\n```\n:::\n\n\n#### 2.1.1 Dengue_Daily.csv Data\n\nFirst-time load of the aspatial data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_sf <- read_csv(\"../../data/TaiwanDengue/Dengue_Daily.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 106861 Columns: 26\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (23): 個案研判日, 性別, 年齡層, 居住縣市, 居住鄉鎮, 居住村里, 最小統計區, 最小統計區中心點X, 最小統計區中心點Y, 一級...\ndbl   (1): 確定病例數\ndate  (2): 發病日, 通報日\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n*The output of the read_csv() command indicates that R recognises \"發病日\" as a date object, so we don't have to transform it.*\n\nAs we are only interested in the count of the dengue cases during a particular date window and their location (Tainan City only), we can select only the relevant columns from the table, namely the date of onset, town name, village name and the corresponding coordinate pair.\n\n*\\*The dates specified by epidemiology week are from 2023-08-01 to 2023-12-16*\n\n\n::: {.cell}\n\n```{.r .cell-code}\npruneddengue_sf <- dengue_sf %>%\n  filter(感染縣市 == \"台南市\" & 發病日 >= as.Date(\"2023-08-01\") & 發病日 <= as.Date(\"2023-12-16\")) %>%\n  select(發病日, 居住鄉鎮, 居住村里, 最小統計區中心點X, 最小統計區中心點Y)\n```\n:::\n\n\nI will also rename the chosen columns to their English translations to simplify reading of the columns.We can use the same naming convention for town and village names as in the geospatial dataframe to make the columns more consistent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npruneddengue_sf <- pruneddengue_sf %>%\n  rename('Date of Onset' = 發病日,\n         TOWNNAME = 居住鄉鎮,\n         VILLNAME = 居住村里,\n         X_Coord = 最小統計區中心點X,\n         Y_Coord = 最小統計區中心點Y)\n```\n:::\n\n\nThis yields a much tidier dataset to work with, but there are still a dozen or so null values under X & Y_Coords, which we can remove. (Null values for village name are still fine as they have their coordinate pair to be used for mapping)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npruneddengue_sf <- pruneddengue_sf %>%\n  filter(X_Coord != \"None\" & Y_Coord != \"None\")\n```\n:::\n\n\nFinally, we see that the X & Y_Coords are not compatible with the village geospatial polygon data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(pruneddengue_sf$X_Coord)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(pruneddengue_sf$Y_Coord)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nIn fact they are not even numerical data.\n\nTo address this, we can convert it into an sf object just like prunedvillage_sf on the same CRS 3824.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npruneddengue_sf$X_Coord <- as.numeric(pruneddengue_sf$X_Coord)\npruneddengue_sf$Y_Coord <- as.numeric(pruneddengue_sf$Y_Coord)\n\npruneddengue_sf <- st_as_sf(pruneddengue_sf, coords = c(\"X_Coord\", \"Y_Coord\"), crs = 3824)\n```\n:::\n\n\nNow that this has been standardised, we can save pruneddengue_sf as an RDS also.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_rds(pruneddengue_sf, \"../../data/TaiwanDengue/pruneddengue_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npruneddengue_sf <-  read_rds(\"../../data/TaiwanDengue/pruneddengue_sf.rds\")\n```\n:::\n\n\n#### 2.1.2 Visualising the Separate Datasets\n\nThe map of our chosen area of Tainan City:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(prunedvillage_sf) +\n  tm_borders() +\n  tm_fill() +\n  tm_layout(title = \"Study Area Layer\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThe map of dengue cases:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(pruneddengue_sf) +\n  tm_dots() +\n  tm_layout(title = \"Dengue Cases\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 3 Overlaying Dengue Cases onto Study Layer\n\n### 3.1 Intersection of prunedvillage_sf & pruneddengue_sf\n\nWe perform the first joining action on the 2 sf dataframes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dengue_on_village <- st_intersection(prunedvillage_sf, pruneddengue_sf)\n```\n:::\n\n\nThis required a very long execution time so I am choosing to save it as an RDS as well to avoid future computation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_rds(dengue_on_village, \"../../data/TaiwanVillage/dengue_on_village.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_on_village <- read_rds(\"../../data/TaiwanVillage/dengue_on_village.rds\")\n```\n:::\n\n\nHowever during the intersection, the shared columns were not merged and there are entries containing \"None\" under the VILLNAME.1 column. We need to remove these and consolidate the intersected dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_dengue_on_village <- dengue_on_village %>%\n  filter(VILLNAME.1 != \"None\")\n\ncleaned_dengue_on_village <- cleaned_dengue_on_village %>%\n  select(-c(TOWNNAME.1, VILLNAME.1))\n```\n:::\n\n\nAgain, we'll save this as an RDS to avoid future computation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_rds(cleaned_dengue_on_village, \"../../data/TaiwanVillage/cleaned_dengue_on_village.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_dengue_on_village <- read_rds(\"../../data/TaiwanVillage/cleaned_dengue_on_village.rds\")\n```\n:::\n\n\n#### 3.1.0 Initial Plot of Dengue Cases on Map (as dots)\n\nPlotting this dengue layer on the map of our study area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(prunedvillage_sf) + \n  tm_polygons(\"TOWNID\") +\n  tm_shape(cleaned_dengue_on_village) +\n  tm_dots(col = \"black\", size = 0.0001)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nWhile this shows us the distribution of all the dengue cases in our study area, it is not very clear or intuitive where the highest-hit sectors are due to all the dots.\n\n#### 3.1.1 Plotting of Dengue Cases without dots\n\nFirst we need to group the count of dengue cases by village to do away with the dots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_conc <- cleaned_dengue_on_village %>%\n  group_by(VILLNAME) %>%\n  summarise(Cases_per_village = n())\n```\n:::\n\n\nWe want to join this new dataframe with the village geospatial data to be able to create a choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_conc <- st_join(prunedvillage_sf, dengue_conc)\n```\n:::\n\n\nWe can now plot a map of the total dengue cases per village.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(dengue_conc) +\n  tm_fill(col = \"Cases_per_village\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Dengue Cases\") +\n  tm_layout(main.title = \"Total Dengue Cases per Village\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nUnfortunately this has uncovered values that are \"NA\" under VILLNAME.y and under Cases_per_village. We need to remove these entries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_conc <- dengue_conc %>%\n  filter(!is.na(Cases_per_village))\n```\n:::\n\n\nWe can now plot the map again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(dengue_conc) +\n  tm_fill(col = \"Cases_per_village\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Dengue Cases\") +\n  tm_layout(main.title = \"Total Dengue Cases per Village\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nAnd we'll save dengue_conc as an RDS for future reference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_rds(dengue_conc, \"../../data/TaiwanVillage/dengue_conc.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_conc <- read_rds(\"../../data/TaiwanVillage/dengue_conc.rds\")\n```\n:::\n\n\nHowever the usefulness of knowing the total cases per sector is limited. It may only reflect that the population or population densities in these sectors are relatively high, or that the transmission vectors are more significant in these sectors.\n\n#### 3.1.2 Visualising Dengue Cases per County per Month\n\nTo see the true presence of dengue cases, we have to backtrack to the original dengue cases dataframe and group the cases by village and date of onset that correspond to the epidemiology weeks. To keep things simpler, we will group the cases by month, first looking at August.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_aug <- pruneddengue_sf %>%\n  filter(`Date of Onset` >= as.Date(\"2023-08-01\") & `Date of Onset` <= as.Date(\"2023-08-31\")) %>%\n  group_by(VILLNAME) %>%\n  summarise(Cases_per_month = n())\n\ndengue_aug <- st_join(prunedvillage_sf, dengue_aug)\n```\n:::\n\n\nNow we can visualise this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(dengue_aug) +\n  tm_fill(col = \"Cases_per_month\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Dengue Cases\") +\n  tm_layout(main.title = \"Total Dengue Cases per Village in August 2023\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nWe can do another plot for September:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_sept <- pruneddengue_sf %>%\n  filter(`Date of Onset` >= as.Date(\"2023-09-01\") & `Date of Onset` <= as.Date(\"2023-09-30\")) %>%\n  group_by(VILLNAME) %>%\n  summarise(Cases_per_month = n())\n\ndengue_sept <- st_join(prunedvillage_sf, dengue_sept)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(dengue_sept) +\n  tm_fill(col = \"Cases_per_month\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Dengue Cases\") +\n  tm_layout(main.title = \"Total Dengue Cases per Village in September 2023\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nAnd now for October:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_oct <- pruneddengue_sf %>%\n  filter(`Date of Onset` >= as.Date(\"2023-10-01\") & `Date of Onset` <= as.Date(\"2023-10-31\")) %>%\n  group_by(VILLNAME) %>%\n  summarise(Cases_per_month = n())\n\ndengue_oct <- st_join(prunedvillage_sf, dengue_oct)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(dengue_oct) +\n  tm_fill(col = \"Cases_per_month\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Dengue Cases\") +\n  tm_layout(main.title = \"Total Dengue Cases per Village in October 2023\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nNovember:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_nov <- pruneddengue_sf %>%\n  filter(`Date of Onset` >= as.Date(\"2023-11-01\") & `Date of Onset` <= as.Date(\"2023-11-30\")) %>%\n  group_by(VILLNAME) %>%\n  summarise(Cases_per_month = n())\n\ndengue_nov <- st_join(prunedvillage_sf, dengue_nov)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(dengue_nov) +\n  tm_fill(col = \"Cases_per_month\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Dengue Cases\") +\n  tm_layout(main.title = \"Total Dengue Cases per Village in November 2023\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nAnd finally December:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_dec <- pruneddengue_sf %>%\n  filter(`Date of Onset` >= as.Date(\"2023-12-01\") & `Date of Onset` <= as.Date(\"2023-12-16\")) %>%\n  group_by(VILLNAME) %>%\n  summarise(Cases_per_month = n())\n\ndengue_dec <- st_join(prunedvillage_sf, dengue_dec)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(dengue_dec) +\n  tm_fill(col = \"Cases_per_month\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          title = \"Total Dengue Cases\") +\n  tm_layout(main.title = \"Total Dengue Cases per Village in December 2023\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nIt appears that cases peaked in September and October, with their spread across many villages. When cases dipped in November and December, they were more concentrated in a few villages.\n\n## 4 Global Spatial Autocorrelation Analysis\n\n### 4.1 Deriving contiguity weights: Queen's method\n\n#### 4.1.0 Simplifying the Data\n\nAs this component of the analysis is only concerned with spatial properties, we can revert to the original pruneddengue_sf dataframe.To prevent conflicts with the previous dataframes, we will create a new dataframe and regroup the dengue cases by village, performing the same treatment as above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npruneddengue_1 <- pruneddengue_sf %>%\n  group_by(VILLNAME) %>%\n  summarise(Cases_per_village = n()) %>%\n  filter(!(VILLNAME == \"None\"))\n```\n:::\n\n\nWe can now join the data again and impute the NA values with 0, as missing values in this context would mean that there were no dengue cases in that village.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_presc <- st_join(prunedvillage_sf, pruneddengue_1)\ndengue_presc$Cases_per_village[is.na(dengue_presc$Cases_per_village)] <- 0\n```\n:::\n\n\nWe save this as an RDS for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_rds(dengue_presc, \"../../data/TaiwanVillage/dengue_presc.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_presc <- read_rds(\"../../data/TaiwanVillage/dengue_presc.rds\")\n```\n:::\n\n\n#### 4.1.1 Deriving the contiguity weights: Queen's method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- dengue_presc %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before = 1)\n```\n:::\n\n\nInspecting the dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 289\nColumns: 11\n$ nb                <nb> <6, 126, 178>, <134, 137, 150, 189, 247>, <73, 74, 19…\n$ wt                <list> <0.3333333, 0.3333333, 0.3333333>, <0.2, 0.2, 0.2, …\n$ VILLCODE          <chr> \"67000350032\", \"67000270011\", \"67000370005\", \"670003…\n$ TOWNNAME          <chr> \"安南區\", \"仁德區\", \"中西區\", \"南區\", \"安南區\", \"安…\n$ VILLNAME.x        <chr> \"青草里\", \"保安里\", \"赤嵌里\", \"大成里\", \"城北里\", \"…\n$ VILLENG           <chr> \"Qingcao Vil.\", \"Bao'an Vil.\", \"Chihkan Vil.\", \"Dach…\n$ TOWNID            <chr> \"D06\", \"D32\", \"D08\", \"D02\", \"D06\", \"D06\", \"D08\", \"D0…\n$ TOWNCODE          <chr> \"67000350\", \"67000270\", \"67000370\", \"67000330\", \"670…\n$ VILLNAME.y        <chr> \"青草里\", \"保安里\", \"赤嵌里\", \"大成里\", \"城北里\", \"…\n$ Cases_per_village <dbl> 2, 21, 111, 29, 1, 12, 36, 33, 48, 106, 48, 26, 65, …\n$ geometry          <POLYGON [°]> POLYGON ((120.1176 23.08387..., POLYGON ((12…\n```\n:::\n:::\n\n\n### 4.2 Computing Global Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI <- global_moran(wm_q$Cases_per_village,\n                       wm_q$nb,\n                       wm_q$wt)\n\nglimpse(moranI)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ I: num 0.391\n $ K: num 5.55\n```\n:::\n:::\n\n\n### 4.3 Performing Global Moran's I Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$Cases_per_village,\n                  wm_q$nb,\n                  wm_q$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 12.231, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.390624515      -0.003472222       0.001038270 \n```\n:::\n:::\n\n\n### 4.4 Performing Global Moran's I Permutation Test\n\nTo ensure reproducible results, we specify the seed used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$Cases_per_village,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.39062, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n:::\n:::\n\n\n### 4.5 Analysis of Global Moran's I Test Results\n\nWe see that the p-value is less than 0.05, so we can reject the null hypothesis that there is no spatial autocorrelation in the distribution of dengue cases in Tainan City.\n\nIn addition, because Moran's I statistic is positive, we can infer that there are signs of clustering in the distribution of dengue cases.\n\n## 5 Local Spatial Autocorrelation Analysis\n\n### 5.1 Computing Local Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- wm_q %>%\n  mutate(local_moran = local_moran(\n    Cases_per_village, nb, wt, nsim = 99),\n    .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n\n### 5.2 Visualising Local Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of Cases per Village\",\n            main.title.size = 0.7)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n### 5.3 Visualising p-value of Local Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Local Moran's I\",\n            main.title.size = 0.7)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n### 5.4 Visualising Local Moran's I & p-value\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of Cases per Village\",\n            main.title.size = 0.7)\n\nmap2 <- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Local Moran's I\",\n            main.title.size = 0.7)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n### 5.5 Visualising LISA Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig <- lisa  %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n## 6 Hot & Cold Spot Area Analysis (HCSA)\n\n### 6.1 Computing local Gi\\* statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw <- dengue_presc  %>%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Polygon provided. Using point on surface.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA <- wm_idw %>% \n  mutate(local_Gi = local_gstar_perm(\n    Cases_per_village, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\nHCSA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 289 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0627 ymin: 22.89401 xmax: 120.2925 ymax: 23.09144\nGeodetic CRS:  TWD97\n# A tibble: 289 × 19\n   gi_star    e_gi    var_gi p_value  p_sim p_folded_sim skewness kurtosis nb   \n     <dbl>   <dbl>     <dbl>   <dbl>  <dbl>        <dbl>    <dbl>    <dbl> <nb> \n 1  -1.97  0.00269   1.96e-6  -1.74  0.0815         0.04     0.02   0.847  <int>\n 2  -1.06  0.00286   1.27e-6  -0.715 0.475          0.54     0.27   0.768  <int>\n 3  -0.403 0.00345   6.67e-7  -0.520 0.603          0.76     0.38   0.451  <int>\n 4  -0.505 0.00312   1.29e-6  -0.247 0.805          0.9      0.45   0.714  <int>\n 5  -2.10  0.00299   1.63e-6  -2.02  0.0432         0.02     0.01   0.625  <int>\n 6  -2.89  0.00299   1.26e-6  -2.53  0.0115         0.02     0.01   0.715  <int>\n 7  -1.18  0.00326   1.68e-6  -1.05  0.294          0.28     0.14   0.408  <int>\n 8  -1.18  0.00313   1.21e-6  -1.12  0.262          0.26     0.13   0.414  <int>\n 9  -0.401 0.00329   6.36e-7  -0.249 0.803          0.9      0.45   0.0594 <int>\n10   1.12  0.00349   1.04e-6   1.32  0.187          0.28     0.14   0.442  <int>\n# ℹ 279 more rows\n# ℹ 10 more variables: wts <list>, VILLCODE <chr>, TOWNNAME <chr>,\n#   VILLNAME.x <chr>, VILLENG <chr>, TOWNID <chr>, TOWNCODE <chr>,\n#   VILLNAME.y <chr>, Cases_per_village <dbl>, geometry <POLYGON [°]>\n```\n:::\n:::\n\n\n### 6.2 Visualising Gi\\*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n### 6.3 Visualising p-value of HCSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n### 6.4 Visualising Local HCSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\nmap1 <- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of Dengue Cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Values have found that are less than the lowest break\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Values have found that are higher than the highest break\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"p_value\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n### 6.5 Visualising Hot & Cold Spot Areas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig <- HCSA  %>%\n  filter(p_sim < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n![Google Maps View of Tainan City](satelite_tainan.png){fig-alt=\"satelite_view\" fig-align=\"center\"}\n\nComparing the hotspot-coldspot map alongside a rough overview of the same area on Google Maps, we can see that the coldspot to the north and west (south of the Zeng Wun River) is located in a less urban area, and zooming in reveals extensive farmland. \n\nHowever the hotspot near the central Yan Shui river Yong Kang district can be observed to be relatively more urbanised, and zooming in reveals large water bodies surrounded by isolated areas adjacent to the urban hinterlands. \n\nSimilarly the hotspot to the east is a forested area with various water bodies nearby, surrounded by urban areas. \n\nThese observations are consistent with the known breeding grounds of the Aedes mosquito. \n\n## 7 Emerging Hotspot Analysis\n\n### 7.1 Creating a Time Series Cube\n\n#### 7.1.1 Getting the Data Columns\n\nOur time data is located inside pruneddengue_sf, but this is not in the week integer format that we need. So first we must convert this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweek_dengue <- pruneddengue_sf %>%\n  mutate(Week = epiweek(`Date of Onset`)) %>%\n  select(-`Date of Onset`)\n\nweek_dengue$Week <- as.numeric(week_dengue$Week)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_dengue <- dengue_presc %>%\n  rename(VILLNAME = VILLNAME.x) %>%\n  select(-VILLNAME.y) %>%\n  filter(Cases_per_village != 0)\n```\n:::\n\n\n```\n\n::: {.cell}\n\n```{.r .cell-code}\n# dengue_cube <- spacetime(final_dengue, week_dengue,\n#                               .loc_col = \"VILLNAME\",\n#                               .time_col = \"Week\"\n#                               )\n```\n:::\n\n```{r})\n\n```\n\n\n\n### 7.2 Verifying Space-Time Cube\nNow we check that dengue_cube is indeed a space-time cube object.\n\n::: {.cell}\n\n```{.r .cell-code}\n# is_spacetime_cube(dengue_cube)\n```\n:::\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}