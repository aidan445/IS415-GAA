---
title: In-class Exercise 7
execute:
  freeze: true
---
### 1.0 Loading of Packages

```{r}
pacman::p_load(sp, spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

### 2.0 Data Loading and Preparation

#### 2.1 Geospatial Myanmar Township Data
```{r}
shan_sf <- read_rds("../../Data/Shan/shan_sf.rds")
```

```{r}
#| eval: false
shan_sf <- st_read(dsn = "../../data/myanmar_township_boundary", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)")) %>%
  select(c(2:7))
```

We include the filter function to exclude the other states of Myanmar, so we are only interested in Shan. We also don't want the irrelevant columns, or the columns we don't understand such as those containing the Burmese names.

We have also carefully selected the columns that share data fields with the aspatial Shan ICT data, which we can inspect through its CSV file. These shared data fields will be used for joining later.

#### 2.2 Aspatial Shan ICT Data

```{r}
ict <- read_csv ("../../Data/Shan/Shan-ICT.csv")
```

#### 2.3 Checking the data

We run this command to check the data.

```{r}
shan_sf
```

Class command also.

```{r}
class(shan_sf)
```

```{r}
summary(ict)
```

Running this summary command lets us see the great variation in the data. Some are in the range of 10,000 or less, and some are as high as 62,000. This indicates we have to standardise this data for hierarchical clustering.

#### 2.4 Pruning the data

Here, we scale the data and rename it to more intuitive names.

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 
```

```{r}
summary(ict_derived)
```

#### 2.5 EDA of the Data

To collate all the plots and display them together, we create the plots individually first.

```{r}
radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

#### 2.6 EDA using Choropleth Map

Now, we must join the data.

```{r eval=FALSE, freeze=TRUE}
shan_sf <- left_join(shan_sf,
                     ict_derived,
                     by = c("TS_PCODE" = "TS_PCODE"))

write_rds(shan_sf, "../../Data/Shan/shan_sf.rds")
```



### 3.0 Hierarchical Clustering Analysis

#### 3.1 Correlation Analysis

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

Since INTERNET_PR and COMPUTER_PR are highly correlated, we can remove one of them. We will remove INTERNET_PR.

#### 3.2 Hierarchical Clustering

We must drop the geometry columns of the sf object as it will cause errors.

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```
